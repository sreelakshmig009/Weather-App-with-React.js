{"version":3,"sources":["FormattedDate.js","WeatherIcon.js","WeatherTemperature.js","WeatherInfo.js","WeatherForecastDay.js","WeatherForecast.js","Weather.js","App.js","reportWebVitals.js","index.js"],"names":["FormattedDate","props","day","data","getDay","hours","getHours","minutes","getMinutes","WeatherIcon","icon","code","color","size","animate","WeatherTemperature","className","Math","round","celsius","WeatherInfo","city","date","description","temperature","humidity","wind","WeatherForecastDay","Date","dt","weather","temp","max","maxTemperatur","min","minTemperatur","WeatherForecast","useState","loaded","setLoaded","forecast","setForecast","handleResponse","response","daily","useEffect","coordinates","map","dailyForecast","index","longitude","lon","latitude","lat","apiUrl","axios","get","then","load","Weather","ready","weatherData","setWeatherData","defaultCity","setCity","coord","main","speed","name","search","onSubmit","event","preventDefault","type","placeholder","autoFocus","onChange","target","value","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.473e0d08.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FormattedDate(props) {\r\n  let days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  let day = days[props.data.getDay()];\r\n  let hours = props.data.getHours();\r\n  let minutes = props.data.getMinutes();\r\n  if (minutes < 10) {\r\n    minutes = `0${minutes}`;\r\n  }\r\n  if (hours < 10) {\r\n    hours = `0${hours}`;\r\n  }\r\n  return (\r\n    <div>\r\n      {day} {hours}:{minutes}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\n\r\nexport default function WeatherIcon(props) {\r\n  const codeMapping = {\r\n    \"01d\": \"CLEAR_DAY\",\r\n    \"01n\": \"CLEAR_NIGHT\",\r\n    \"02d\": \"FEW_CLOUDS\",\r\n    \"02n\": \"FEW_CLOUDS\",\r\n    \"03d\": \"FEW_CLOUDS\",\r\n    \"03n\": \"FEW_CLOUDS\",\r\n    \"04d\": \"CLOUDY\",\r\n    \"04n\": \"CLOUDY\",\r\n    \"09d\": \"RAIN\",\r\n    \"09n\": \"RAIN\",\r\n    \"10d\": \"RAIN\",\r\n    \"10n\": \"RAIN\",\r\n    \"11d\": \"WIND\",\r\n    \"11n\": \"WIND\",\r\n    \"13d\": \"SNOW\",\r\n    \"13n\": \"SNOW\",\r\n    \"50d\": \"FOG\",\r\n    \"50n\": \"FOG\",\r\n  };\r\n  return (\r\n    <ReactAnimatedWeather\r\n      icon={codeMapping[props.code]}\r\n      color=\"#BFA2DB\"\r\n      size={props.size}\r\n      animate={true}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function WeatherTemperature(props) {\r\n  return (\r\n    <div className=\"weatherTemperature\">\r\n      <span className=\"temperature\">\r\n        {\"\"} {Math.round(props.celsius)}{\" \"}\r\n      </span>\r\n      <span className=\"unit\">°C</span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport FormattedDate from \"./FormattedDate\";\r\nimport WeatherIcon from \"./WeatherIcon\";\r\nimport WeatherTemperature from \"./WeatherTemperature\";\r\n\r\nexport default function WeatherInfo(props) {\r\n  return (\r\n    <div className=\"weatherInfo\">\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <h1>{props.data.city}</h1>\r\n\r\n          <ul>\r\n            <li>\r\n              {\" \"}\r\n              <FormattedDate data={props.data.date} />\r\n            </li>\r\n            <li className=\"text-capitalize\">{props.data.description} </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"col-5\">\r\n          <div className=\"float-left\">\r\n            <WeatherIcon code={props.data.icon} size={64} />\r\n          </div>\r\n          <WeatherTemperature celsius={props.data.temperature} />\r\n          <ul>\r\n            <li> Humidity : {props.data.humidity}% </li>\r\n            <li>Wind : {Math.round(props.data.wind)} km/h</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport WeatherIcon from \"./WeatherIcon\";\r\n\r\nexport default function WeatherForecastDay(props) {\r\n  function maxTemperatur() {\r\n    let temperature = Math.round(props.data.temp.max);\r\n    return `${temperature}°`;\r\n  }\r\n  function minTemperatur() {\r\n    let temperature = Math.round(props.data.temp.min);\r\n    return `${temperature}°`;\r\n  }\r\n\r\n  function day() {\r\n    let date = new Date(props.data.dt * 1000);\r\n    let day = date.getDay();\r\n\r\n    let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    return days[day];\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"weatherForecast-day\">{day()}</div>\r\n      <WeatherIcon code={props.data.weather[0].icon} size={36} />\r\n      <div className=\"weather-temperatures\">\r\n        <span className=\"weather-temperature-max\">{maxTemperatur()}</span>\r\n        <span className=\"weather-temperature-min\">{minTemperatur()}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./WeatherForecast.css\";\r\nimport axios from \"axios\";\r\nimport WeatherForecastDay from \"./WeatherForecastDay\";\r\n\r\nexport default function WeatherForecast(props) {\r\n  let [loaded, setLoaded] = useState(false);\r\n  let [forecast, setForecast] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoaded(false);\r\n  }, [props.coordinates]);\r\n\r\n  function handleResponse(response) {\r\n    setForecast(response.data.daily);\r\n    setLoaded(true);\r\n  }\r\n  function load() {\r\n    let apiKey = \"23299a9890a18af9b64db3fe1ab69a3a\";\r\n    let longitude = props.coordinates.lon;\r\n    let latitude = props.coordinates.lat;\r\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={part}&appid=${apiKey}&units=metric`;\r\n\r\n    axios.get(apiUrl).then(handleResponse);\r\n  }\r\n\r\n  if (loaded) {\r\n    return (\r\n      <div className=\"weatherForecast\">\r\n        <div className=\"row\">\r\n          {forecast.map(function (dailyForecast, index) {\r\n            if (index < 5) {\r\n              return (\r\n                <div className=\"col\" key={index}>\r\n                  <WeatherForecastDay data={dailyForecast} />\r\n                </div>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    load();\r\n    return null;\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\nimport WeatherForecast from \"./WeatherForecast\";\r\nimport axios from \"axios\";\r\nimport \"./Weather.css\";\r\n\r\nexport default function Weather(props) {\r\n  const [weatherData, setWeatherData] = useState({ ready: false });\r\n  const [city, setCity] = useState(props.defaultCity);\r\n\r\n  function handleResponse(response) {\r\n    setWeatherData({\r\n      ready: true,\r\n      coordinates: response.data.coord,\r\n      date: new Date(response.data.dt * 1000),\r\n      temperature: response.data.main.temp,\r\n      description: response.data.weather[0].description,\r\n      icon: response.data.weather[0].icon,\r\n      humidity: response.data.main.humidity,\r\n      wind: response.data.wind.speed,\r\n      city: response.data.name,\r\n    });\r\n  }\r\n  function search() {\r\n    const apiKey = \"ac4e20b6c2abc335bfda5f8b0935cab8\";\r\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\r\n    axios.get(apiUrl).then(handleResponse);\r\n  }\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    search(city);\r\n  }\r\n  function handleCityChange(event) {\r\n    setCity(event.target.value);\r\n  }\r\n  if (weatherData.ready) {\r\n    return (\r\n      <div className=\"weather\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"row\">\r\n            <div className=\"col-9\">\r\n              <input\r\n                type=\"search\"\r\n                placeholder=\"Enter a city name\"\r\n                className=\"form-control\"\r\n                autoFocus=\"on\"\r\n                onChange={handleCityChange}\r\n              />\r\n            </div>\r\n            <div className=\"col-3\">\r\n              <input\r\n                type=\"Submit\"\r\n                value=\"Search\"\r\n                className=\"btn btn-primary  w-100\"\r\n                id = \"#search\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <WeatherInfo data={weatherData} />\r\n        <WeatherForecast coordinates={weatherData.coordinates} />\r\n      </div>\r\n    );\r\n  } else {\r\n    search();\r\n    return \"Loadind...\";\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Weather from './Weather';\r\nimport './App.css';\r\n\r\nexport default  function App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n  <Weather  defaultCity= \"Chennai\"/>\r\n  </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}